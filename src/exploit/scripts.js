import { ScriptsManager } from "./scriptsManager";
import { toggleAutoAnswer } from "./scripts/autoanswer.js";

function getConfig(name){
    fetch(`/config/${name}.json`).then((response) => {
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
    });
}

export class ScriptHandler {
    scripts = {
        autoanswer: {
            script: toggleAutoAnswer,
            config: getConfig('autoanswer'),
            default: {
                keybind: 'e',
                interval: {
                    min: 1000,
                    max: 5000
                }
            }
        }
    }
    constructor() {
        console.log("ScriptHandler constructor");
        this.manager = new ScriptsManager();
        for (const [name, data] of Object.entries(this.scripts)) {
            let config = data.config;
            if (config === undefined) {
                console.log(`Config for ${name} not found, using default`);
                config = data.default;
            }
            console.log(`Config for ${name}:`, config);
            let keybind = config.keybind || 'e';
            console.log(`Adding script ${name} with keybind ${keybind}`);
            this.manager.addScript(name, data.script, keybind);
        }
    }
}