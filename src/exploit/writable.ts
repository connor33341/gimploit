export type Writable<T> = any;
class WritableStore<T> {
    private value: T;
    private subscribers: Set<(value: T) => void>;

    constructor(initialValue: T) {
        this.value = initialValue;
        this.subscribers = new Set();
    }

    set(newValue: T) {
        this.value = newValue;
        this.subscribers.forEach((subscriber) => subscriber(newValue));
    }

    subscribe(callback: (value: T) => void) {
        callback(this.value); // Call immediately with the current value
        this.subscribers.add(callback);

        return () => {
            this.subscribers.delete(callback);
        };
    }

    get() {
        return this.value;
    }
}

function writable<T>(initialValue: T) {
    return new WritableStore<T>(initialValue);
}

function get<T>(store: WritableStore<T>): T {
    return store.get();
}